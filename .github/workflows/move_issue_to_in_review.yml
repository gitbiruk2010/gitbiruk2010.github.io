# .github/workflows/move-issue-to-in-review.yml
name: Move linked issue to "In review" when PR is opened
on:
  pull_request:
    types: [opened, reopened, ready_for_review]

jobs:
  move_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Move linked issues to "In review"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prBody = context.payload.pull_request.body || "";
            const issueRefs = [...prBody.matchAll(/#(\d+)/g)].map(m => m[1]);

            if (issueRefs.length === 0) {
              console.log("No linked issues found (no #123 pattern).");
              return;
            }

            const fieldName = "Status";        // must match your Project field name
            const fieldValue = "In review";    // must match your desired Status value
            const projectNumber = 1;           // your Project number (from URL)
            const org = context.repo.owner;    // org or user that owns the project

            // Query Project ID
            const projectQuery = await github.graphql(`
              query($org: String!, $num: Int!) {
                organization(login: $org) {
                  projectV2(number: $num) { id }
                }
              }
            `, { org, num: projectNumber });
            const projectId = projectQuery.organization.projectV2.id;

            // Query the field and option IDs
            const fieldsQuery = await github.graphql(`
              query($project: ID!) {
                node(id: $project) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2FieldCommon { id name }
                        ... on ProjectV2SingleSelectField { options { id name } }
                      }
                    }
                  }
                }
              }
            `, { project: projectId });

            const statusField = fieldsQuery.node.fields.nodes.find(f => f.name === fieldName);
            const optionId = statusField.options.find(o => o.name === fieldValue)?.id;
            if (!optionId) {
              core.setFailed(`Could not find field value '${fieldValue}' in '${fieldName}'`);
              return;
            }

            for (const issue of issueRefs) {
              console.log(`Updating issue #${issue}...`);

              // Find the project item for this issue
              const itemQuery = await github.graphql(`
                query($org: String!, $issue: Int!, $project: Int!) {
                  repository(owner: $org, name: "${context.repo.repo}") {
                    issue(number: $issue) {
                      id
                      projectItems(first: 10) {
                        nodes { id project { number } }
                      }
                    }
                  }
                }
              `, { org, issue: parseInt(issue), project: projectNumber });

              const issueId = itemQuery.repository.issue.id;
              const item = itemQuery.repository.issue.projectItems.nodes
                .find(n => n.project.number === projectNumber);
              if (!item) {
                console.log(`Issue #${issue} not in project; skipping`);
                continue;
              }

              await github.graphql(`
                mutation($item: ID!, $field: ID!, $option: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}",
                    itemId: $item,
                    fieldId: $field,
                    value: { singleSelectOptionId: $option }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                item: item.id,
                field: statusField.id,
                option: optionId
              });

              console.log(`âœ… Issue #${issue} moved to '${fieldValue}'`);
            }
